openapi: 3.0.3
info:
  title: Diploma project - OpenAPI 3.0
  description: |-
    This is a Project based on Spring Boot
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    get:
      tags:
       - user
      summary: Get all users
      description: ''
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Create user
      description: ''
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - user
      summary: Update user
      description: ''
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'The id of user that needs to be fetched'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: ''
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id of user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: USER_ROLE
      xml:
        name: title
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        password:
          type: string
          example: '12345'
        inputTime:
          type: string
          example: "1985-09-25 17:45:30.005"
        roles:
          type: array
          items: 
            $ref: '#/components/schemas/Role'
      xml:
        name: user
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'